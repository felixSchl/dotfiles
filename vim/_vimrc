" vim: set foldmethod=marker:
" Init vundle {{{
" -------------------------------------------------------------------------------
let s:isWin=0
let s:isLinux=0
if has('win32') || has('win64')
  set rtp+=~/vimfiles/bundle/vundle/
  call vundle#rc('$HOME/vimfiles/bundle/')
  let s:isWin=1
else
  " Usual quickstart instructions
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()
  let s:isLinux=1
endif
" }}}
" Mandatory settings {{{
" ------------------------------------------------------------------------------
set guioptions+=M
set nocompatible
filetype indent plugin on
" }}}
" Mappings {{{
" ------------------------------------------------------------------------------
let mapleader = ","
if (s:isWin)
    nmap <F2>           :e ~/_vimrc<CR>
    nmap <F3>           :so ~/_vimrc<CR>
    nmap <leader>E      :Start explorer %:h<CR>
else
    nmap <F2>           :e ~/.vimrc<CR>
    nmap <F3>           :so ~/.vimrc<CR>
    nmap <leader>E      :Start nautilus %:h<CR>
endif
nmap Q              <Nop>

" " Select visual lines by default
" nmap j gj
" nmap k gk

" Fastes insert mode leaving
imap jk <ESC>

" Quickly remove search highlight
nmap <F4> :nohl<CR>

" Easier copying and pasting
nmap <leader>p      "*p
nmap <leader>P      "*P
imap <C-_>          <C-R>
vmap <leader>y      "*yy

" Start the current file as a command
nmap <leader>e      :Start %s:h<CR>

" Easier window navigation
nmap <C-H>          <C-W>h
nmap <C-J>          <C-W>j
nmap <C-K>          <C-W>k
nmap <C-L>          <C-W>l

" Mouse scrolling
map <ScrollWheelUp> <C-Y>
map <S-ScrollWheelUp> <C-U>
map <ScrollWheelDown> <C-E>
map <S-ScrollWheelDown> <C-D>

" Always launch command editing window
" nmap : q:i
" nmap / q:i
" nmap ? q?i

" Faster substitute prompt
nmap <leader>; :%s:::g<Left><Left><Left>
nmap <leader>' :%s:::gc<Left><Left><Left><Left>

" }}}
" Bundles {{{
Bundle 'flazz/vim-colorschemes'
Bundle 'tpope/vim-dispatch'
Bundle 'endel/actionscript.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tsaleh/vim-matchit'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'
Bundle 'tpope/vim-surround'
Bundle 'Townk/vim-autoclose'
Bundle 'ervandew/supertab'
Bundle 'vim-scripts/cg.vim'
Bundle 'dart-lang/dart-vim-plugin'
Bundle 'vim-scripts/VOoM'
Bundle 'vim-scripts/CRefVim'

Bundle 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc_use_embeds_in_codeblocks_for_langs = [
    \ "python"
    \ ]

Bundle 'vim-pandoc/vim-pantondoc'
let g:pantondoc_use_pandoc_markdown = 1
" let g:pandoc_use_conceal = 0

Bundle 'vim-scripts/mru.vim'
nmap <leader>r      :MRU<CR>

Bundle 'vim-scripts/glsl.vim'
au BufNewFile,BufRead *.shader set filetype=glsl.c

" Bundle 'nosami/Omnisharp'
" au filetype cs nmap <buffer> <leader>gs :OmniSharpStartServer<CR>
" au filetype cs nmap <buffer> <leader>gt :OmniSharpHighlightTypes<CR>
" au filetype cs nmap <buffer> <leader>gd :OmniSharpGotoDefinition<CR>
" au filetype cs nmap <buffer> <leader>gu :OmniSharpFindUsages<CR>
" au filetype cs nmap <buffer> <leader>gr :OmniSharpGetCodeActions<CR>
" au filetype cs nmap <buffer> <leader>ge :OmniSharpFindSyntaxErrors<CR>

" Bundle 'scrooloose/syntastic'

Bundle 'dhruvasagar/vim-table-mode'
let g:table_mode_corner = '+'

Bundle 'tomtom/tcomment_vim'
nmap <C-i> gccj
vmap <C-i> gcc

Bundle 'scrooloose/nerdtree'
nmap <F6> :NERDTreeToggle<CR>
let g:NERDTreeHighlightCursorline=1
let g:NERDTreeWinPos="right"

Bundle 'majutsushi/tagbar'
nmap <F5> :TagbarToggle<CR>
let g:tagbar_left=1

Bundle "nelstrom/vim-visual-star-search"
Bundle 'thinca/vim-visualstar'
nmap * <Plug>(visualstar-*)N

Bundle 'milkypostman/vim-togglelist'
nmap <script> <silent> <leader>l :call ToggleLocationList()<CR>
nmap <script> <silent> <leader>q :call ToggleQuickfixList()<CR>

Bundle 'vim-scripts/toggle_words.vim'
nmap <leader>\ :ToggleWord<CR>

" Bundle 'sjl/gundo.vim'
" nmap <leader>u :GundoToggle<CR>

Bundle 'tyru/open-browser.vim'
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

Bundle 'kien/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPCurWD'
" }}}
" Global preferences {{{
" ------------------------------------------------------------------------------
syntax on
set lazyredraw
set sessionoptions-=options
set sessionoptions-=folds
set viminfo='50,<1000,s100,n~/.viminfo
set autoindent
set backspace=indent,eol,start
set complete-=1
set showmatch
set smarttab
set nrformats-=octal
set shiftround
set ttimeout
set ttimeoutlen=50
set exrc
set hidden
set nospell
set showcmd
set incsearch
set hlsearch
set number
set norelativenumber
set nowrap
set ruler
set linebreak
let &showbreak='... '
set cursorline
set ignorecase
set smartcase
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=80
set foldmethod=syntax
set foldlevelstart=99
set formatoptions-=t
set foldcolumn=3
autocmd FileType qf wincmd J " quickfix list at bottom
set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc,*.swp
set suffixes+=.class,.exe,.o,.obj,.dat,.dll,.aux,.pdf,.gch
set wildmenu
set wildmode=longest:list,full
set laststatus=2
set ttimeoutlen=50
set enc=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,prc
" }}}
" Theme  {{{
" ------------------------------------------------------------------------------
set colorcolumn=+1

" Random Colors {{{2
func! Rand(lower, upper)
" Gets random number in range (lower, upper)
python << EOF
import vim, random
r = random.randint(int(vim.eval('a:lower')), int(vim.eval('a:upper')))
vim.command('return ' + str(r))
EOF
endfunc

func! SetRandomColorScheme(colors)
    " Load the color scheme
    execute 'colorscheme ' . a:colors[Rand(0, len(a:colors) - 1)]

    " Cursor line default colors
    let cursor_line_normal_bg = "#333333"
    let cursor_line_insert_bg = "#002143"

    " Overwrites
    if (g:colors_name == "molokai")
        hi! link Conceal Operator
        hi! link ColorColumn WarningMsg
    elseif (g:colors_name == "candyman")
        let cursor_line_normal_bg = "#222222"
        hi! link ColorColumn SpecialKey
    elseif (g:colors_name == "jellybeans")
        let cursor_line_normal_bg = "#222222"
        hi! link ColorColumn SpecialKey
    elseif (g:colors_name == "xoria256")
        hi! link ColorColumn VertSplit
    elseif (g:colors_name == "herald")
        hi! link ColorColumn StatusLine
    elseif (g:colors_name == "lilypink")
        hi! link ColorColumn StatusLineNC
    elseif (g:colors_name == "wombat256mod")
        hi! link ColorColumn SpecialKey
    elseif (g:colors_name == "inkpot")
        hi! link ColorColumn LineNr
    elseif (g:colors_name == "pf_earth")
        hi! link ColorColumn LineNr
    elseif (g:colors_name == "kolor")
        hi! link ColorColumn LineNr
    elseif (g:colors_name == "lodestone")
        hi! link ColorColumn LineNr
    elseif (g:colors_name == "darkburn")
        hi! link ColorColumn ErrorMsg
    elseif (g:colors_name == "graywh")
    endif

    " Set the cursor line color
    execute "hi! CursorLine guibg=".cursor_line_normal_bg." guifg=NONE"
    execute "au InsertEnter * hi! CursorLine guibg=".cursor_line_insert_bg." guifg=NONE"
    execute "au InsertLeave * hi! CursorLine guibg=".cursor_line_normal_bg." guifg=NONE"
endfunc
" }}}2

if has("gui_running")

    let colors = []
    " call add(colors, "molokai")
    call add(colors, "candyman")
    call add(colors, "darkburn")
    call add(colors, "jellybeans")
    call add(colors, "lilypink")
    call add(colors, "wombat256mod")
    " call add(colors, "inkpot")
    call add(colors, "pf_earth")
    call add(colors, "kolor")
    call add(colors, "lodestone")
    call add(colors, "herald")
    call SetRandomColorScheme(colors)

    " TagHighlight classes
    highlight Class guifg=#5199C0
    highlight LocalVariable guifg=#ffffff
    highlight Function guifg=#F4F885

    if (s:isWin)
        set guifont=Consolas:h11:cANSI
    else
        set guifont=DejaVu\ \Sans\ Mono
    endif
    set guifontwide=NSimsun:h12
    set guioptions-=m
    set guioptions+=c
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    set guioptions-=b
    set guioptions-=T
else
    set t_Co=256
    if (s:isLinux)
        call SetRandomColorScheme([
                    \  "xoria256"
                    \ ])
    endif
    hi CursorLine term=NONE cterm=NONE ctermbg=236
endif
" }}}
" Filetypes {{{
" ------------------------------------------------------------------------------
" Adobe extend script 
autocmd BufRead,BufNewFile *.jsx setlocal filetype=javascript
autocmd BufRead,BufNewFile *.jsxinc setlocal filetype=javascript
autocmd BufRead,BufNewFile *.mxi setlocal filetype=xml

" CSharp
autocmd BufRead,BufNewFile *.cshtml setlocal filetype=xml.javascript

" ActionScript3
autocmd BufRead,BufNewFile *.as setlocal filetype=as3

" Java
let java_highlight_all=1
let java_highlight_debug=1
autocmd filetype java setlocal suffixesadd+=.java

" Unity Shaders
autocmd BufRead,BufNewFile *.shader setlocal filetype=cg

" Dart
autocmd BufRead,BufNewFile *.dart setlocal filetype=dart

" HTML
autocmd filetype html setl shiftwidth=2

" Python
autocmd filetype python setlocal foldmethod=indent

" Ruby
autocmd filetype ruby setl shiftwidth=2

" Rails asset pipeline
autocmd BufRead,BufNewFile *.slim set filetype=slim

" }}}
" Custard Square {{{
" ------------------------------------------------------------------------------
" Start the smartfox server
func! StartSFS2X()
    execute 'Start ' . $SFS2X . '/restartSFS2X.bat' 
endfunc
nmap <silent> <leader>ws         :call StartSFS2X()<CR>
" }}}
" Tracking {{{
" ------------------------------------------------------------------------------
func! TrackerAddItem()
    let b:ve=&ve
    set ve=all
    execute 'normal 0$  v80|r-$hhhhxxxxx iOPEN'
    let &ve=b:ve
    unlet! b:ve
endfunc

func! TrackerCloseItem()
    execute 'normal 0 /OPEN$/ciwDONE'
endfunc

func! TrackerOpenItem()
    execute 'normal 0 /DONE$/ciwOPEN'
endfunc

nmap <silent> <leader>ma        :call TrackerAddItem()<CR>
nmap <silent> <leader>mc        :call TrackerCloseItem()<CR>
nmap <silent> <leader>mo        :call TrackerOpenItem()<CR>
vmap <silent> <leader>ma        :call TrackerAddItem()<CR>
vmap <silent> <leader>mc        :call TrackerCloseItem()<CR>
vmap <silent> <leader>mo        :call TrackerOpenItem()<CR>
" }}}
" ... {{{
func! ConvertAsToDart()
  execute '%s/\<var\>//'
  execute '%s/\<private\>//'
  execute '%s/\<protected\>//'
  execute '%s/\<public\>//'
  execute '%s/\<override\>//'
  execute '%s/\<uint\>/int/'
  execute '%s/\<function\>//'
  execute '%s/\<Number\>/num/'
  execute '%s/\<Boolean\>/bool/'
  execute '%s/\<Math\.max\>/max/'
  execute '%s/\<Math\.min\>/min/'
  execute 'normal >>'
  execute 'normal <<'
endfunc
nmap <silent> <leader>c :call ConvertAsToDart()<CR>
"
" }}}
